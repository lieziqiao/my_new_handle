{"name": "test_login[info1]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: A session is either terminated or not started", "trace": "self = <Script.test_login_app_new.TestLoginNew object at 0x039D34F0>\ninfo = {'pwd': '1382000', 'username': '13922034702'}\n\n    @pytest.mark.parametrize(\"info\", [{\"username\": \"13922034602\", \"pwd\": \"10086\"},\n                                      {\"username\": \"13922034702\", \"pwd\": \"1382000\"}])\n    def test_login(self, info):\n        time.sleep(3)\n        # 点击首页的我\n>       self.page.init_home.click_me()\n\ntest_login_app_new.py:36: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Page_app\\page_wangyi_first.py:73: in click_me\n    self.handle.tap_me()\n..\\Page_app\\page_wangyi_first.py:55: in tap_me\n    self.tap_element(self.element_find.look_for_me())\n..\\Page_app\\page_wangyi_first.py:30: in look_for_me\n    return self.find_element_by_slide(self.me)\n..\\Base_app\\base_app.py:117: in find_element_by_slide\n    self.phone_slide(direction=direction)\n..\\Base_app\\base_app.py:83: in phone_slide\n    phone_windows = self.driver.get_window_size()\nF:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1108: in get_window_size\n    size = self.get_window_rect()\nF:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1165: in get_window_rect\n    return self.execute(Command.GET_WINDOW_RECT)['value']\nF:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\nF:\\MyProgram\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:29: in check_response\n    raise wde\nF:\\MyProgram\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py:24: in check_response\n    super(MobileErrorHandler, self).check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <appium.webdriver.errorhandler.MobileErrorHandler object at 0x00E13630>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"A session is either terminated or not star...\\\\\\node_modules\\\\\\\\appium\\\\\\\\node_modules\\\\\\\\send\\\\\\\\index.js:725:14)\\\\n    at FSReqWrap.oncomplete (fs.js:182:21)\"}}'}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: A session is either terminated or not started\n\nF:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: InvalidSessionIdException"}, "steps": [{"name": "点击首页中的我", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: A session is either terminated or not started\n\n", "trace": "  File \"F:\\MyProgram\\python36\\lib\\site-packages\\allure_commons\\_allure.py\", line 157, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\ASUS001\\Desktop\\GatherFrame\\Page_app\\page_wangyi_first.py\", line 55, in tap_me\n    self.tap_element(self.element_find.look_for_me())\n  File \"C:\\Users\\ASUS001\\Desktop\\GatherFrame\\Page_app\\page_wangyi_first.py\", line 30, in look_for_me\n    return self.find_element_by_slide(self.me)\n  File \"C:\\Users\\ASUS001\\Desktop\\GatherFrame\\Base_app\\base_app.py\", line 117, in find_element_by_slide\n    self.phone_slide(direction=direction)\n  File \"C:\\Users\\ASUS001\\Desktop\\GatherFrame\\Base_app\\base_app.py\", line 83, in phone_slide\n    phone_windows = self.driver.get_window_size()\n  File \"F:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1108, in get_window_size\n    size = self.get_window_rect()\n  File \"F:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1165, in get_window_rect\n    return self.execute(Command.GET_WINDOW_RECT)['value']\n  File \"F:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"F:\\MyProgram\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 29, in check_response\n    raise wde\n  File \"F:\\MyProgram\\python36\\lib\\site-packages\\appium\\webdriver\\errorhandler.py\", line 24, in check_response\n    super(MobileErrorHandler, self).check_response(response)\n  File \"F:\\MyProgram\\python36\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1591164356620, "stop": 1591164356638}], "attachments": [{"name": "log", "source": "a771ef85-3c5c-473e-a775-2842e6c783b2-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "info", "value": "{'username': '13922034702', 'pwd': '1382000'}"}], "start": 1591164353620, "stop": 1591164356640, "uuid": "e487c637-2c2c-4d7c-a814-face05999201", "historyId": "49eb77fd01b927ee6a31bd88307de78d", "testCaseId": "3ea83457d26baa59fe790ade77d119d6", "fullName": "Script.test_login_app_new.TestLoginNew#test_login", "labels": [{"name": "parentSuite", "value": "Script"}, {"name": "suite", "value": "test_login_app_new"}, {"name": "subSuite", "value": "TestLoginNew"}, {"name": "host", "value": "DESKTOP-03F992M"}, {"name": "thread", "value": "9548-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Script.test_login_app_new"}]}